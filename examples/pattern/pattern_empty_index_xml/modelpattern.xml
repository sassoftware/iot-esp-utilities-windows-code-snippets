<engine>
 <description>
  This is a simple example that has one source window and one pattern
  window. Each window uses the empty index, pi_EMPTY.  This means no
  events are retained by the windows.  The pattern window finds increases
  in price for a certain stock within a time interval.


  engine element creates the single engine top level container which sets up dfESP
  fundamental services such as licensing, logging, pub/sub, ...
  This single engine instance wraps one or more projects that wrap
  one or more continuous queries and different types of windows.
 </description>
 <projects>
  <project name='pattern_empty_index' pubsub='auto' threads='1'>
   <description>
    This is to create a project. Project specifies a container
    that holds one or more continuous queries and are backed by a
    thread pool of user defined size. One can specify the pubsub
    port and type, number of threads for the project, index type
    and if using Tag Token data flow model.
   </description>
   <contqueries>
    <contquery name='contquery_01' trace='patternWindow_01'>
     <description>
      This specifies the continuous query container that holds
      a collection of windows and enables one to specify the
      connectivity between windows. One can turn on tracing
      for a list of window and specifies the index type for
      windows in the query.

      This fully specifies the continuous query with window
      connectivity, which is a directed graph.
     </description>
     <windows>
      <window-source name='sourceWindow_01' index='pi_EMPTY' insert-only='true' collapse-updates='true'>
       <description>
        This defines a source window. All event streams must
        enter continuous queries by being published or
        injected into a source window. The index type of pi_EMPTY
        is specified, which means the index should always be empty,
        i.e. do not store or index any events. Set the source window
        to Insert Only, i.e. we are only going to send inserts into
        this window.
        This window has a file/socket connector which reads in events
        from a file in CSV format and publishes them to the ESP Engine.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int32' key='true'/>
         <field name='symbol' type='string'/>
         <field name='currency' type='int32'/>
         <field name='udate' type='int64'/>
         <field name='msecs' type='int32'/>
         <field name='price' type='double'/>
         <field name='quant' type='int32'/>
         <field name='venue' type='int32'/>
         <field name='broker' type='int32'/>
         <field name='buyer' type='int32'/>
         <field name='seller' type='int32'/>
         <field name='buysellflg' type='int32'/>
         <field name='trade_time' type='stamp'/>
        </fields>
       </schema>
       <connectors>
        <connector name='pub' class='fs'>
         <properties>
          <property name='type'>pub</property>
          <property name='fsname'>50k.csv</property>
          <property name='fstype'>csv</property>
          <property name='dateformat'>%Y-%m-%d %H:%M:%S</property>
         </properties>
        </connector>
       </connectors>
      </window-source>
      <window-pattern name='patternWindow_01' collapse-updates='true'>
       <description>
        This is a pattern window.  This window is also set to 
        retain no data by specifying an empty index, i.e. the 
        index type is set to pi_EMPTY. 
        Pattern windows are always insert-only so most of the 
        time you will want to set the index to pi_EMPTY to avoid 
        endless event growth.

        The pattern element defines the pattern of interest for 
        the pattern window.
        The first event of interest looks for the symbol=="GMTC",
        and sets the unification variables s==symbol, p0=price,
        and q0=quant.

        The second event of interest must have a symbol that
        matches the first event of interest, and it's price and
        quant must have gone up by 50%. We also set the
        unification variables p1 and q1 to the price and
        quantity of the event that matches this second event of
        interest.

        The third event of interest must have a symbol that matches
        the first event of interest (and the second), and it's
        price and quant must have gone up by 50% from the price
        and quant of the second event of interest.
        We want event 1 followed by event 2 followed by event 3 each
        within 200 milliseconds of the previous event.

        Define the non-key fields that make up the event that
        we output when the pattern is actually detected. Based on
        our schema we just output the ID's of the three events
        that make up the sequence of events that cause the pattern
        to fire.

        Timings for the pattern will be driven by the values in
        the trade_time field from sourceWindow_01.
        This window has a csv file connector that subscribes to
        the pattern window and outputs the window content
        to a file.
       </description>
       <schema>
        <fields>
         <field name='ID' type='int64' key='true'/>
         <field name='ID1' type='int32'/>
         <field name='ID2' type='int32'/>
         <field name='ID3' type='int32'/>
        </fields>
       </schema>
       <patterns>
        <pattern>
         <events>
          <event source='sourceWindow_01' name='e1'><![CDATA[symbol=="GMTC" and s==symbol and p0==price and q0==quant]]></event>
          <event source='sourceWindow_01' name='e2'><![CDATA[s==symbol and p0<price*1.5 and q0<quant*1.5 and p1==price and q1==quant]]></event>
          <event source='sourceWindow_01' name='e3'><![CDATA[s==symbol and p1<price*1.5 and q1<quant*1.5]]></event>
         </events>
         <logic>fby{200 milliseconds}(e1, e2, e3)</logic>
         <output>
          <field-selection name='ID' node='e1'/>
          <field-selection name='ID' node='e2'/>
          <field-selection name='ID' node='e3'/>
         </output>
         <timefields>
          <timefield source='sourceWindow_01' field='trade_time'/>
         </timefields>
        </pattern>
       </patterns>
       <connectors>
        <connector name='sub' class='fs'>
         <properties>
          <property name='type'>sub</property>
          <property name='snapshot'>true</property>
          <property name='fsname'>output.csv</property>
          <property name='fstype'>csv</property>
         </properties>
        </connector>
       </connectors>
      </window-pattern>
     </windows>
     <edges>
      <edge source='sourceWindow_01' target='patternWindow_01'/>
     </edges>
    </contquery>
   </contqueries>
  </project>
 </projects>
</engine>

